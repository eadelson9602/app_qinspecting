import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:app_qinspecting/providers/providers.dart';
import 'package:app_qinspecting/services/services.dart';

class ConnectivityListenerService {
  static final ConnectivityListenerService _instance =
      ConnectivityListenerService._internal();
  factory ConnectivityListenerService() => _instance;
  ConnectivityListenerService._internal();

  StreamSubscription<List<ConnectivityResult>>? _connectivitySubscription;
  bool _isCheckingUpload = false;
  Timer? _debounceTimer;
  DateTime? _lastUploadAttempt;
  Set<int> _processingIds = {};

  /// Inicializa el listener de conectividad
  void initialize() {
    print(
        '[CONNECTIVITY LISTENER] üîÑ Inicializando listener de conectividad...');
    print(
        '[CONNECTIVITY LISTENER] üìç Este listener monitorear√° la conexi√≥n y subir√° autom√°ticamente las inspecciones pendientes');
    _connectivitySubscription = Connectivity().onConnectivityChanged.listen(
      (List<ConnectivityResult> results) {
        final result =
            results.isNotEmpty ? results.first : ConnectivityResult.none;
        print(
            '[CONNECTIVITY LISTENER] üì° Cambio de conectividad detectado: $result');
        _handleConnectivityChange(result);
      },
      onError: (error) {
        print('[CONNECTIVITY LISTENER] ‚ùå Error en listener: $error');
      },
    );
    print('[CONNECTIVITY LISTENER] ‚úÖ Listener inicializado');
  }

  /// Maneja los cambios de conectividad
  Future<void> _handleConnectivityChange(ConnectivityResult result) async {
    // Si no hay conexi√≥n, no hacer nada
    if (result == ConnectivityResult.none) {
      print('[CONNECTIVITY LISTENER] ‚ö†Ô∏è Sin conexi√≥n detectada');
      return;
    }

    // Cancelar cualquier verificaci√≥n previa pendiente
    _debounceTimer?.cancel();

    // Debounce: esperar 3 segundos despu√©s del √∫ltimo cambio antes de verificar
    _debounceTimer = Timer(const Duration(seconds: 3), () async {
      await _checkAndUploadPending();
    });
  }

  /// Verifica la conexi√≥n estable y sube las inspecciones pendientes
  Future<void> _checkAndUploadPending() async {
    // Evitar verificar si ya est√° en proceso
    if (_isCheckingUpload) {
      print(
          '[CONNECTIVITY LISTENER] ‚è≥ Ya hay una verificaci√≥n en proceso, esperando...');
      return;
    }

    // Verificar cooldown para evitar subidas demasiado frecuentes
    if (_lastUploadAttempt != null) {
      final timeSinceLastAttempt =
          DateTime.now().difference(_lastUploadAttempt!);
      if (timeSinceLastAttempt.inSeconds < 30) {
        print(
            '[CONNECTIVITY LISTENER] ‚è≥ Cooldown activo, esperando... (${30 - timeSinceLastAttempt.inSeconds}s restantes)');
        return;
      }
    }

    _lastUploadAttempt = DateTime.now();

    _isCheckingUpload = true;
    print('[CONNECTIVITY LISTENER] üîç Verificando inspecciones pendientes...');

    try {
      // Obtener instancia del servicio
      final inspeccionService = InspeccionService();

      // Verificar si la conexi√≥n es estable
      final isStable = await inspeccionService.isConnectionStable();

      if (!isStable) {
        print(
            '[CONNECTIVITY LISTENER] ‚ö†Ô∏è La conexi√≥n no es estable, esperando...');
        _isCheckingUpload = false;
        return;
      }

      print('[CONNECTIVITY LISTENER] ‚úÖ Conexi√≥n estable detectada');

      // Obtener instancia del servicio de login
      final loginService = LoginService();

      // Configurar token primero
      await loginService.setTokenFromStorage();

      // Verificar que hay una empresa seleccionada
      if (loginService.selectedEmpresa.nombreBase == null ||
          loginService.selectedEmpresa.nombreBase!.isEmpty) {
        print(
            '[CONNECTIVITY LISTENER] ‚ö†Ô∏è No hay empresa seleccionada, verificando datos en storage...');

        // Intentar cargar datos desde storage
        final readUsuario = await loginService.storage.read(key: 'usuario');
        final readNombreBase =
            await loginService.storage.read(key: 'nombreBase');

        if (readUsuario == null ||
            readNombreBase == null ||
            readUsuario.isEmpty ||
            readNombreBase.isEmpty) {
          print('[CONNECTIVITY LISTENER] ‚ö†Ô∏è No hay datos de sesi√≥n guardados');
          _isCheckingUpload = false;
          return;
        }

        print(
            '[CONNECTIVITY LISTENER] üìã Datos de sesi√≥n encontrados, cargando empresa...');

        // Cargar empresa desde SQLite
        final tempEmpresa = await DBProvider.db.getEmpresaById(readNombreBase);
        if (tempEmpresa == null || tempEmpresa.nombreBase == null) {
          print('[CONNECTIVITY LISTENER] ‚ö†Ô∏è No se encontr√≥ empresa en SQLite');
          _isCheckingUpload = false;
          return;
        }

        loginService.selectedEmpresa = tempEmpresa;
        print(
            '[CONNECTIVITY LISTENER] ‚úÖ Empresa cargada: ${tempEmpresa.nombreBase}');
      }

      // Obtener inspecciones pendientes desde SQLite
      final allInspecciones = await DBProvider.db.getPendingInspections(
        loginService.selectedEmpresa.numeroDocumento ?? '',
        loginService.selectedEmpresa.nombreBase ?? '',
      );

      if (allInspecciones == null || allInspecciones.isEmpty) {
        print(
            '[CONNECTIVITY LISTENER] üì≠ No hay inspecciones pendientes para subir');
        _isCheckingUpload = false;
        return;
      }

      print(
          '[CONNECTIVITY LISTENER] üìã Inspecciones pendientes encontradas: ${allInspecciones.length}');

      // Mostrar notificaci√≥n de inicio
      if (allInspecciones.length > 0) {
        await NotificationService.showUploadProgressNotification(
          title: 'Subida Autom√°tica',
          body:
              'Iniciando subida de ${allInspecciones.length} inspecci√≥n(es) pendiente(s)...',
          progress: 0,
          total: allInspecciones.length,
        );
      }

      // Configurar token
      await loginService.setTokenFromStorage();

      // Verificar que el token existe
      final nombreBase = loginService.selectedEmpresa.nombreBase;
      final tokenKey = nombreBase != null ? 'token_$nombreBase' : 'token';
      final token = await loginService.storage.read(key: tokenKey);

      if (token == null || token.isEmpty) {
        print(
            '[CONNECTIVITY LISTENER] ‚ö†Ô∏è No hay token disponible, no se pueden subir inspecciones autom√°ticamente');
        _isCheckingUpload = false;
        return;
      }

      print('[CONNECTIVITY LISTENER] ‚úÖ Token validado correctamente');

      // Subir cada inspecci√≥n pendiente
      for (final inspeccion in allInspecciones) {
        try {
          if (inspeccion.id == null) continue;

          // Verificar si esta inspecci√≥n ya est√° siendo procesada
          if (_processingIds.contains(inspeccion.id)) {
            print(
                '[CONNECTIVITY LISTENER] ‚è≠Ô∏è Inspecci√≥n ${inspeccion.id} ya est√° siendo procesada, omitiendo...');
            continue;
          }

          // Marcar como en proceso
          _processingIds.add(inspeccion.id!);

          // Verificar nuevamente que la inspecci√≥n sigue siendo pendiente
          final recheckPending = await DBProvider.db.getPendingInspections(
            loginService.selectedEmpresa.numeroDocumento ?? '',
            loginService.selectedEmpresa.nombreBase ?? '',
          );

          final isStillPending =
              recheckPending?.any((i) => i.id == inspeccion.id) ?? false;

          if (!isStillPending) {
            print(
                '[CONNECTIVITY LISTENER] ‚è≠Ô∏è Inspecci√≥n ${inspeccion.id} ya fue enviada por otro proceso, omitiendo...');
            _processingIds.remove(inspeccion.id!);
            continue;
          }

          print(
              '[CONNECTIVITY LISTENER] ‚¨ÜÔ∏è Subiendo inspecci√≥n ID: ${inspeccion.id}');

          // Usar el m√©todo sendInspeccion con notificaciones habilitadas
          final resultado = await inspeccionService.sendInspeccion(
            inspeccion,
            loginService.selectedEmpresa,
            showProgressNotifications:
                true, // Mostrar notificaciones de progreso
          );

          if (resultado['ok'] == true) {
            print(
                '[CONNECTIVITY LISTENER] ‚úÖ Inspecci√≥n ${inspeccion.id} subida exitosamente');

            // Marcar como enviada en SQLite
            await DBProvider.db.marcarInspeccionComoEnviada(inspeccion.id!);

            print(
                '[CONNECTIVITY LISTENER] ‚úÖ Inspecci√≥n ${inspeccion.id} marcada como enviada en SQLite');
          } else {
            print(
                '[CONNECTIVITY LISTENER] ‚ö†Ô∏è Error al subir inspecci√≥n ${inspeccion.id}: ${resultado['message']}');
          }

          // Remover del set de procesamiento
          _processingIds.remove(inspeccion.id!);
        } catch (e) {
          print(
              '[CONNECTIVITY LISTENER] ‚ùå Error al subir inspecci√≥n ${inspeccion.id}: $e');
          // Remover del set de procesamiento en caso de error
          if (inspeccion.id != null) {
            _processingIds.remove(inspeccion.id!);
          }
        }
      }

      print('[CONNECTIVITY LISTENER] ‚úÖ Proceso de subida completado');

      // Mostrar notificaci√≥n de finalizaci√≥n
      await NotificationService.showSuccessNotification(
        title: 'Subida Autom√°tica',
        body: 'Subida autom√°tica de inspecciones completada',
      );

      // Descartar notificaci√≥n de progreso despu√©s de 3 segundos
      Future.delayed(Duration(seconds: 3), () {
        NotificationService.cancelProgressNotification();
      });
    } catch (e) {
      print('[CONNECTIVITY LISTENER] ‚ùå Error en el proceso: $e');

      // Mostrar notificaci√≥n de error
      await NotificationService.showErrorNotification(
        title: 'Error en Subida',
        body: 'Hubo un error al subir las inspecciones autom√°ticamente',
      );
    } finally {
      _isCheckingUpload = false;
      _processingIds.clear(); // Limpiar el set de IDs procesados
    }
  }

  /// Cancela el listener de conectividad
  void dispose() {
    _debounceTimer?.cancel();
    _connectivitySubscription?.cancel();
    print('[CONNECTIVITY LISTENER] üõë Listener detenido');
  }
}
